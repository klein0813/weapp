var ins = null  // 当前组件实例
var imageElems = null// 图片节点列表
var imageElem = null// 当前图片节点
var boxElem = null//图片 box 节点
var config = {  // 配置数据
  scale: 1,     //默认图片放大倍数
  maxScale: 4,  //图片默认最大放大倍数
  maxOverScale: 6,  //图片放大倍数最大可达到
  minScale: 0.75, //图片最小可放大倍数
  slipTime: 0.5,    //图片切换时间
  maxOverWidthPercent: 0.5, //边界图片最大可拉取宽度，屏幕宽度的百分比
  marginRight: 15  //图片之间的间隔->previewImage-item的margin-right
}
var box = {  //图片容器
  x: 0,  // x 轴位置
  mx: 0  // x 轴位移量
}
var imageStatus = { // 图片状态
  x: 0,// x 轴位置
  y: 0,// y 轴位置
  mx: 0,// x 轴位移量
  my: 0,// y 轴位移量
  scale: 1,// 缩放倍数
  scalem: 1// 两指缩放时的倍数
}
var imageInfo = { // 图片信息
  width: null,// 一般为屏宽
  height: null// 图片长度
}
var index = null // 图片索引
var winw = null //窗口的宽度
var winh = null //窗口的高度
var imageChageMoveX = null  //图片切换容器的x位移量
var imageChageNeedX= null //图片切换所需x位移量
var ts = null //touch 初始位置
var tm = null //touch 中间位置
var te = null //touch 结束位置
var allowMove = true  //行为标记
var allowClick = true //单击，长按行为标记
var statusX = 0  //标记X轴位移状态
/* statusX 标记详情 scale > 1: 1~4, scale = 1
* 1: box到达右边界
* 2: box到达左边界
* 3: 正常状态
* 4: image 到达左/右边界
* 5: scale = 1时，长图片, box到达左右边界
* 6: scale = 1时，长图片, 正常上下滑动
* 7: scale = 1时，长图片, 上下边界
*/
var statusY = 0  //标记Y轴位移状态
/* statusY 标记详情
* 1: 超过窗口上/下边界
* 2: 正常状态
*/
var maxLen = null //索引最大值
var allowX = null
/* allowX 标记详情
* > 0, 可左移的最大量
* < 0, 可右移的最大量
*/
var allowY = null
/* allowY 标记详情
* > 0, 可下移的最大量
* < 0, 可上移的最大量
*/

function propObserver (newValue, oldValue, ownerInstance, instance) {
  console.log('propObserver', JSON.stringify(newValue), JSON.stringify(oldValue))
  if (!ins) {
    ins = ownerInstance
  }
  if (!oldValue) {
    imageStatusRewrite()
    imageElems = ownerInstance.selectAllComponents('.previewImage-image')
    boxElem = ownerInstance.selectComponent('.previewImage-box')
  }
  if (newValue.height) {
    imageInfo = newValue
    index = imageInfo.index
    box.x = -imageChageMoveX * index
    allowMove = true
    imageElem = imageElems[index]
  } else if (newValue.windowHeight) {
    var info = newValue
    winw = info.windowWidth 
    winh = info.windowHeight
    imageChageMoveX = config.marginRight + winw
    imageChageNeedX = Math.floor(winw * (0.5))
  }
}

function touchStartFun (event, ins) {
  ts = getTouches(event)
  allowMove = true
  allowClick = true
  statusX = 0
  statusY = 0
}

function touchMoveFun (event, ins) {
  tm = getTouches(event)
  moveAction(ts, tm)
}

function touchEndFun (event, ins) {
  te = getTouches(event)
  endAction(ts, te)
}

function tapFun (event, ins) {
  if (!allowClick) {
    return
  }
  ins.callMethod("click", {index})
}

function longpressFun (event, ins) {
  if (!allowClick) {
    return
  }
  allowMove = false
  ins.callMethod("toSaveImage", {index})
}

/**
 * `touchmove` 相关逻辑 
 * @param {[ETObject]} ts - 初始位置
 * @param {[ETObject]} tm - 移动位置
 */
function moveAction (ts,tm) {
  if (!allowMove) {
    return
  }
  var maxWidth = config.winw * 0.3 / imageStatus.scale
  var x0_offset = tm.x0 - ts.x0
  var y0_offset = tm.y0 - ts.y0
  var imgPositionX = imageStatus.x + x0_offset
  var imgPositionY = imageStatus.y + y0_offset
  var allow = getAllow()
  allowX = allow.x
  allowY = allow.y0
  if (Math.abs(x0_offset) > 5) {
    allowClick = false
  }
  if (x0_offset <= 0) {
    allowX = -allowX
  }
  if (y0_offset <= 0) {
    allowY = allow.y1
  }
  if (tm.length == 1) {
    if (imageStatus.scale > 1) { 
      if (imgPositionY >= allow.y0){
        statusY = 1
        var overY = imgPositionY - allow.y0
        imageStatus.my = allow.y0 - imageStatus.y + getSlowlyNum(overY, maxWidth)
      } else if (imgPositionY <= allow.y1) {
        statusY = 1
        var overY = imgPositionY - allow.y1
        imageStatus.my = allow.y1-imageStatus.y + getSlowlyNum(overY, maxWidth) 
      } else {
        statusY = 2
        imageStatus.my = y0_offset
      }

      if (x0_offset < 0 && imageStatus.x <= -allow.x) {
        statusX = 1
        box.mx = x0_offset
        if (index == maxLen) {
          box.mx = getSlowlyNum(x0_offset)
        }
        transform(0, 1)
        transform(0)
      } else if (x0_offset > 0 && imageStatus.x >= allow.x) {
        statusX = 2
        box.mx = x0_offset
        if(index == 0){
          box.mx = getSlowlyNum(x0_offset)
        }
        transform(0, 1)
        transform(0)
      } else {
        if (x0_offset == 0) {
          return
        }
        statusX = 3
        imageStatus.mx = x0_offset
        if(imgPositionX >= allow.x){
          statusX = 4
          var overX = imgPositionX - allow.x
          imageStatus.mx = allowX - imageStatus.x + getSlowlyNum(overX, maxWidth)
        }
        if(imgPositionX <= -allow.x){
          statusX = 4
          var overX = imgPositionX + allow.x
          imageStatus.mx = -allow.x-imageStatus.x + getSlowlyNum(overX, maxWidth)
        }
        transform(0)
      }
    } else {
      if (Math.abs(y0_offset) > 5 && statusX != 5){
        var imgBottom = imageInfo.height - winh
        if (y0_offset > 0 && imgPositionY > 0) {
          statusX = 7
          allowY = 0
          imageStatus.my = -imageStatus.y + getSlowlyNum(imgPositionY, maxWidth)
        } else if (y0_offset < 0 && imgPositionY < -imgBottom) {
          statusX = 7
          if(imageInfo.height > winh){
            var overY = imgPositionY + imgBottom
            allowY = -imgBottom
            imageStatus.my = -imgBottom - imageStatus.y + getSlowlyNum(overY, maxWidth)
          } else {
            allowY = 0
            imageStatus.my = -imageStatus.y + getSlowlyNum(imgPositionY, maxWidth)
          }
        } else {
          statusX = 6
          imageStatus.my = y0_offset
        }
        transform(0)
      } else {
        if (statusX == 6){
          return
        }
        statusX = 5
        if ((index == 0 && x0_offset > 0) || (index == maxLen && x0_offset < 0)) {
          box.mx = getSlowlyNum(x0_offset)
        } else {
          box.mx = x0_offset
        }
        transform(0, 1)
      }
    }
  } else {
    var scalem = getScale(ts, tm)
    var scale = scalem * imageStatus.scale
    if (scale >= config.maxScale) {
      var over = scale - config.maxScale
      scale = config.maxScale + getSlowlyNum(over, config.maxOverScale)
      scalem = scale / imageStatus.scale
    }
    if (scale <= config.minScale) {
      scalem = config.minScale / imageStatus.scale
    }
    imageStatus.scalem = scalem
    transform(0)
  }
}

/**
 * `touchend` 相关逻辑 
 * @param {[ETObject]} ts - 初始位置
 * @param {[ETObject]} te - 结束位置
 */
function endAction (ts, te){
  var x0_offset = te.x0 - ts.x0
  var time = te.time - ts.time
  var slipTime = 0
  allowMove = false
  if (ts.length == 1) {
    switch (statusY) {
      case 1:
        imageStatus.y = allowY
        imageStatus.my = 0
        slipTime = config.slipTime
        break
      case 2:
        imageStatus.y = imageStatus.y + imageStatus.my
        imageStatus.my = 0
        break
    }

    switch (statusX) {
      case 1:
        if (index != maxLen && (x0_offset <= -imageChageNeedX || (time < 200 && x0_offset < -30))) {  //下一图
          changeIndex(1)
        } else {
          changeIndex(0)
          if(slipTime != 0){
          transform(config.slipTime)
          }
        }
        break
      case 2:
        if (index !=0 && (x0_offset >= imageChageNeedX || (time < 200 && x0_offset > 30))) { //上一图
          changeIndex(-1)
        } else {
          changeIndex(0)
          if (slipTime != 0){
          transform(config.slipTime)
          }
        }
        break
      case 3:
        imageStatus.x = imageStatus.x + imageStatus.mx
        imageStatus.mx = 0
        transform(config.slipTime)
        break
      case 4:
        imageStatus.x = allowX
        imageStatus.mx = 0
        slipTime = config.slipTime
        transform(config.slipTime)
        break
      case 5:
        if (x0_offset >= imageChageNeedX || (time < 200 && x0_offset > 30)){
          changeIndex(-1)
        } else if (x0_offset <= -imageChageNeedX || (time < 200 && x0_offset < -30)){
          changeIndex(1)
        } else {
          changeIndex(0)
        }
        break
      case 6:
        imageStatus.y = imageStatus.y + imageStatus.my
        imageStatus.my = 0
        break
      case 7:
        imageStatus.y = allowY
        imageStatus.my = 0
        transform(config.slipTime)
        break
    }
  } else {
    var scale = imageStatus.scale * imageStatus.scalem
    imageStatus.scale = scale
    var allow = getAllow()

    if (imageStatus.x > allow.x) {
      slipTime = config.slipTime 
      imageStatus.x = allow.x
    } else if (imageStatus.x < -allow.x){
      slipTime = config.slipTime
      imageStatus.x = -allow.x
    }

    if (imageStatus.y > allow.y0){
      slipTime = config.slipTime 
      imageStatus.y = allow.y0
    } else if (imageStatus.y < allow.y1){
      slipTime = config.slipTime 
      imageStatus.y = allow.y1
    }

    if(imageInfo.height * imageStatus.scale <= winh){
      imageStatus.y = 0
    }

    if(imageInfo.width * imageStatus.scale <= winw){
      imageStatus.x = 0
    }

    imageStatus.scalem = 1
    if (scale > config.maxScale) {
      imageStatus.scale = config.maxScale
      slipTime = config.slipTime
    } else if (scale < 1) {
      imageStatusRewrite()
      slipTime = config.slipTime
    }
    if (slipTime!=0) {
      changeIndex(0)
      transform(config.slipTime)
    }
  }
}

/**
 * 返回 x 轴最大可移动值、上移最大值、下移最大值
 * @returns {{x: number,y0: allowY0,y1: allowY1}}
 */
function getAllow () {
  var allowX = Math.floor((imageInfo.width * imageStatus.scale - winw) / (2 * imageStatus.scale))
  var allowY0, allowY1
  if (imageInfo.height * imageStatus.scale <= winh) {
    allowY0 = 0
    allowY1 = 0
  } else if (imageInfo.height <= winh) {
    allowY0 = Math.floor((imageInfo.height * imageStatus.scale - winh) / (2 * imageStatus.scale))
    allowY1 = -allowY0
  } else {
    allowY0 = Math.floor(imageInfo.height * (imageStatus.scale - 1) / (2 * imageStatus.scale))
    allowY1 = -Math.floor((imageInfo.height * (imageStatus.scale + 1) - 2 * winh) / (2 * imageStatus.scale))
  }
  return {
    x: allowX,
    y0: allowY0,
    y1: allowY1
  }
}

/**
 * 返回阻尼效果程度值
 * @param {number} x - 位移量
 * @param {number} maxOver - 最大可拉取量
 * @returns {number}
 */
function getSlowlyNum (x,maxOver){
  var maxOver = maxOver || winw * config.maxOverWidthPercent
  if(x < 0){
    x = -x
    return -(1 - (x / (maxOver + x))) * x
  } else {
    return (1 - (x / (maxOver + x))) * x
  }
}

/**
 * 获取缩放倍数
 * @param {[ETObject]} ts - 初始位置
 * @param {[ETObject]} tm - 移动位置
 * @returns {number}
 */
function getScale (ts,tm){
  var fingerRangeS = Math.sqrt(Math.pow((ts.x1 - ts.x0), 2) + Math.pow((ts.y1 - ts.y0), 2)) //两手指的初始距离
  var fingerRangeM = Math.sqrt(Math.pow((tm.x1 - tm.x0), 2) + Math.pow((tm.y1 - tm.y0), 2)) //两手指移动过程中的距离
  var range = fingerRangeM / fingerRangeS
  return range
}

/**
 * image-item 状态重置
 * @param {[Number]} rewriteIndex - image-item 索引
 *  - `rewriteIndex` 有值时, 恢复初始状态
 */
function imageStatusRewrite (rewriteIndex) {
  imageStatus.x = 0
  imageStatus.y = 0
  imageStatus.mx = 0
  imageStatus.my = 0
  imageStatus.scale = 1
  imageStatus.scalem = 1
  if(typeof(rewriteIndex) == 'number'){
    transform(config.slipTime)
  }
}

/**
 * image-item 切换
 * @param {[number]} x - 切换标识
 *  - `x = 0`, 不切换
 *  - `x = 1`, 切换到下一张
 *  - `x = -1`, 切换到上一张
 * @description
 *  - 当前是第一张或最后一张时，不切换
 *  - 切换时，前一张恢复初始状态，并触发逻辑层 `indexChange` 方法
 */
function changeIndex (x) {
  var oldIndex = index
  var tempIndex = index
  if (tempIndex == 0 && x == -1) {
    tempIndex = index
  } else if (index == maxLen && x == 1) {
    tempIndex = index
  } else {
    tempIndex += x
  }
  box.x = -imageChageMoveX * tempIndex
  box.mx = 0
  if (oldIndex != tempIndex) {
    imageStatusRewrite(oldIndex)
    ins.callMethod('indexChange', {index: tempIndex})
  }
  transform(config.slipTime, 1)
}

/**
 * @param {[number]} flag - 用于区分`image-box`和`image-item`
 * @param {[number]} duration - 动效时间
 * @description
 *   - 此方法借助 `transform` 实现上下左右移动及大小缩放，借助 `transition` 实现动效，过渡效果为 `ease-out`
 *   - `duration` 用于移动及缩放的动效时间；
 *   - 当 `flag = 1` 时，此方法用于 `image-box` 的移动；
 *   - 当 `flag` 是其它情况时，此方法用 `image-item` 的移动及缩放。
 */
function transform (duration, flag){
  var transition = 'transform ' + duration+'s ease-out'
  if (flag == 1) {
    var offsetX = box.x + box.mx
    var transform = 'translate3d(' + offsetX + 'px,0px,0px)'
    boxElem.setStyle({transform, transition})
  } else {
    var scale = imageStatus.scale * imageStatus.scalem
    var offsetX = imageStatus.x + imageStatus.mx
    var offsetY = imageStatus.y + imageStatus.my
    var transform = 'scale3d('+scale + ','+scale+',1) ' + ' translate3d(' + offsetX + 'px,' + offsetY + 'px,0px)'
    imageElem.setStyle({transform, transition})
  }
}

/**
 * 获取触发点的位置(pageX, pageY)及事件发生时间
 * @param {[number]} event - 当前事件对象
 * @returns {[ETObject]}
 */
function getTouches (event) {
  var touches = event.touches.length > 0 ? event.touches : event.changedTouches
  var obj = {
    touches: touches,
    length: touches.length
  }
  obj.x0 = touches[0].pageX
  obj.y0 = touches[0].pageY
  obj.time = getDate().getTime()
  if(touches.length >= 2){
    obj.x1 = touches[0].pageX
    obj.y1 = touches[1].pageY
  }
  return obj
}

/**
* @typedef {Object} ETObject
 * @property {number} x0 - 第一个触发点的 pageX
 * @property {number} y0 - 第一个触发点的 pageY
 * @property {number} x1 - 若触发点数 `>1` ,则存在，为第二个触发点的 pageX
 * @property {number} y1 - 若触发点数 `>1` ,则存在，为第二个触发点的 pageY
 * @property {date} time - 方法的调用时间，意指事件发生时间
*/

module.exports = {
  propObserver: propObserver,
  touchstart: touchStartFun,
  touchmove: touchMoveFun,
  touchend: touchEndFun,
  longpress: longpressFun,
  tap: tapFun
}
